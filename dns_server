#!/usr/bin/env python3


from socket import *
import time
import sys
import struct

serverSocket = socket(AF_INET, SOCK_DGRAM)
tree = sys.argv[1].split('/')
dnsfilename = sys.argv[1] + "/" + tree[-1] + ".dns"
dnsfile = open(dnsfilename, 'r')
this_ip = dnsfile.read()
this_ip = this_ip.strip()
print(this_ip)
serverSocket.bind((this_ip , int(sys.argv[3])))
file = open(sys.argv[2], "w")
dnsserverfilename = sys.argv[1] + "/" + tree[-1] + ".servers"
dnsserverfile = open(dnsserverfilename, 'r')
all_ips = []
for line in dnsserverfile:
    all_ips.append(line.strip())
print(all_ips)
prev = -1

while 1==1:
    # Recieving message from client
    encodedClientMessage, clientAddress = serverSocket.recvfrom(2048)

    print(encodedClientMessage)
    header = struct.unpack('!HHHHHH', encodedClientMessage[:12])
    qname_end = encodedClientMessage.index(b'\x00', 12)
    qname = encodedClientMessage[12:qname_end]
    names = []
    i = 0
    while(i < len(qname)):
        length = qname[i]
        names.append(qname[i + 1: i + 1 + length].decode())
        i += length + 1
    fullname = '.'.join(names)
    if not fullname == 'video.columbia.edu':
        break
    if (sys.argv[4] == 'round-robin'):
        server_ip = all_ips[prev % len(all_ips)]
    elif (sys.argv[4] == 'lowest-latency'):
        latency = []
        for ip in all_ips:
            start_time = time.time()
            output = subprocess.check_output(['dig', '@' + ip, fullname , '+short'], timeout=5)
            latency.append((time.time() - start_time) * 1000)
            last_lat = latency[-1]
            log_entry = f"{time.time()} measurement-report {ip} {last_lat}\n"
            file.write(log_entry)
            file.flush()
        while latency[prev % len(all_ips)] != min(latency):
                prev += 1
        server_ip = all_ips[prev % len(all_ips)]
    response = struct.pack('!HHHHHH', header[0], 0x8180, 1, 1, 0, 0)
    response += encodedClientMessage[12:qname_end+5]  # Include original question
    response += struct.pack('!HHIH', 1, 1, 0, 4)  # TYPE, CLASS, TTL, RDLENGTH
    response += inet_aton(server_ip)

    prev += 1

    
    serverSocket.sendto(response, clientAddress)
    writestr = f"{time.time()} request-report {sys.argv[4]} {server_ip}\n"
    file.write(writestr)
    file.flush()
serverSocket.close()

