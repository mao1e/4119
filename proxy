#!/usr/bin/env python3

from socket import *
import time
import sys

serverSocket = socket(AF_INET, SOCK_STREAM)

#accept from any address but only listen-port
serverSocket.bind(('' , int(sys.argv[2])))

serverSocket.listen(1)

#open file
file = open(argv[1], "w")


#keep connecting to new client and server when they are disconnected
while 1==1:

  connectionSocket, addr = serverSocket.accept()
  print("accepted from ", addr)
  #THIS IS WHERE YOU CONNECT TO THE SERVER
  clientSocket = socket(AF_INET, SOCK_STREAM)

  #bind to fake-ip, port 0 (any available)
  clientSocket.bind((sys.argv[3], 0))

  #server address is server-ip and port is fixed 8080
  serverName = sys.argv[4]
  serverPort = 8080
  # Connect to the server's listening socket
  clientSocket.connect((serverName, serverPort))

  #keep allowing client and server to send messages to each other
  while 1==1:

      encodedClientMessage = connectionSocket.recv(2048)
      if not encodedClientMessage:
          break

      # Decode the recieved binary message into a string
      decodedClientMessage = encodedClientMessage.decode()
      
      #keep recv if not reached EOM \n
      while(len(decodedClientMessage) > 0 and 
              decodedClientMessage[-4:] != '\r\n\r\n'):
          encodednextmsg = connectionSocket.recv(2048)
          if not encodednextmsg:
              break
          decodednextmsg = encodednextmsg.decode()
          decodedClientMessage += decodednextmsg

      print("Received Message from Client: ", decodedClientMessage)

      message = encodedClientMessage
      print("Sending Message to Server: ", message)

      # Encode the message into binary
      encodedMessage = message.encode()

      # Send the encoded message to the server
      clientSocket.send(encodedMessage)

      # Receive the modified message back from the server
      encodedServerMessage = clientSocket.recv(2048)

      #stop the conversation if server disconnects
      if not encodedServerMessage:
          break

      # Decode the modified message back into a string
      decodedServerMessage = encodedServerMessage.decode()

      #keep recv if not EOM is not \n
      while(len(decodedServerMessage) > 0 and 
              "\r\n\r\n" not in decodedServerMessage):
          encodednextmsg = clientSocket.recv(2048)
          if not encodednextmsg:
              break
          decodednextmsg = encodednextmsg.decode()
          decodedServerMessage += decodednextmsg
      print("Received Message from Server: ", decodedServerMessage)
      index = decodedServerMessage.find("\r\n\r\n")
      responseheaders = decodedServerMessage[:index]
      headers = responseHeaders.split("\r\n")
      clength = 0
      for header in headers:
          if "Content-Length: " in header:
              clength = int(header[17:])
      responsebody = decodedServerMessage[index + 5:]
      if len(responsebody) < clength:
          encodednextmsg = clientSocket.recv(clength - len(responsebody)
          if not encodednextmsg:
              break
          decodednextmsg = encodednextmsg.decode()
          responsebody += decodednextmsg
      decodedServerMessage = responsebody
      print("Sending Message to Client: ", decodedServerMessage)

      # Encode the modified message back into binary
      encodeddecodedServerMessage = decodedServerMessage.encode()

      # Sending the encoded modified message back to the client
      connectionSocket.send(encodeddecodedServerMessage)

  connectionSocket.close()
  clientSocket.close()

serverSocket.close()
