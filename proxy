#!/usr/bin/env python3

from socket import socket, AF_INET, SOCK_DGRAM, inet_ntoa, SOCK_STREAM
import time
import sys
import re
import threading
import struct

bitrates = []


def thread_func(connectionSocket, addr, file, alpha):
    print("accepted from ", addr)
    global bitrates
    #THIS IS WHERE YOU CONNECT TO THE SERVER
    client_Socket = socket(AF_INET, SOCK_STREAM)

    #bind to fake-ip, port 0 (any available)
    client_Socket.bind((sys.argv[5], 0))

    #this is where i parse the dns server ip then query then set server_Name
    tree = sys.argv[1].split('/')
    dnsfilename = sys.argv[1] + "/" + tree[-1] + ".dns"
    with open(dnsfilename, 'r', encoding="utf-8") as dnsfile:
        dns_ip = dnsfile.read().strip()
    print(dns_ip)

    #make the dns req
    domain = 'video.columbia.edu'
    ques = struct.pack('!HHHHHH', 6969, 0x0100, 1, 0, 0, 0)
    ques += b''.join(
        len(part).to_bytes(1, 'big') + part.encode()
        for part in domain.split('.')) + b'\x00'
    ques += struct.pack('!HH', 1, 1)
    dnssock = socket(AF_INET, SOCK_DGRAM)
    dnssock.sendto(ques, (dns_ip, int(sys.argv[6])))
    response, _ = dnssock.recvfrom(512)  # Buffer size is 512 bytes
    dnssock.close()

    #parse the dns response
    header = struct.unpack('!HHHHHH', response[:12])
    ancount = header[3]  # Number of answers

    # Check if there are answers
    if ancount == 0:
        return None

# Skip the question section
    qname_end = response.index(b'\x00',
                               12) + 5  # +5 for null byte, QTYPE, and QCLASS
    answer_start = qname_end

    # Parse the answer section
    answer = response[answer_start:]
    rdlength = struct.unpack('!H', answer[10:12])[0]
    ip = inet_ntoa(answer[12:12 + rdlength])
    print(ip)
    #server address is server-ip and port is fixed 80
    server_Name = ip  #this will be changed later
    serverPort = 8080
    # Connect to the server's listening socket
    client_Socket.connect((server_Name, serverPort))
    tput_curr = 0

    def receive_client_msg(socket_to_use):
        encoded_Client_Message = socket_to_use.recv(2048)
        if not encoded_Client_Message:
            return encoded_Client_Message, None

        # Decode the recieved binary message into a string
        decoded_Client_Message = encoded_Client_Message.decode('iso-8859-1')

        #keep recv if not reached EOM \n
        while (len(decoded_Client_Message) > 0
               and decoded_Client_Message[-4:] != '\r\n\r\n'):
            print("loop")
            encodednextmsg = socket_to_use.recv(2048)
            encoded_Client_Message += encodednextmsg
            if not encodednextmsg:
                break
            decodednextmsg = encodednextmsg.decode()
            decoded_Client_Message += decodednextmsg
        return decoded_Client_Message, encoded_Client_Message


    while True:
        tput_new = 0
        writestr = str(time.time())
        curr_bitrate = 0

        decoded_Client_Message, encoded_Client_Message = receive_client_msg(
            connectionSocket)
        if not decoded_Client_Message:
            break
        cleanclientmsg = encoded_Client_Message
        if (len(bitrates) == 0 and re.search(r'BigBuckBunny_6s_nolist\.mpd',
                                             decoded_Client_Message)):
            print('replaced no list')
            decoded_Client_Message = re.sub(r'BigBuckBunny_6s_nolist\.mpd',
                                          'BigBuckBunny_6s.mpd',
                                          decoded_Client_Message)
        elif (len(bitrates) != 0
              and re.search(r'bunny_(\d+)bps', decoded_Client_Message)):
            print('no list done, fetch bitrate')
            print(bitrates)
            curr_bitrate = bitrates[0]
            for index, bitrate in enumerate(bitrates):
                if bitrate * 1.5 > tput_curr and index > 0:
                    curr_bitrate = bitrates[index - 1]
                    break
                if index == len(bitrates) - 1:
                    curr_bitrate = bitrate
            print('replacing bitrate')
            bitrate_pattern = r'bunny_(\d+)bps'
            decoded_Client_Message = re.sub(bitrate_pattern,
                                          f'bunny_{curr_bitrate}bps',
                                          decoded_Client_Message)
        headers = decoded_Client_Message.split("\n")
        filename = ""
        for header in headers:
            if "GET" in header:
                firstline = header.split(" ")
                filename = firstline[1]
        print("Received Message from Client: ", len(decoded_Client_Message))

        message = decoded_Client_Message
        print("Sending Message to Server: ", len(message))

        # Encode the message into binary
        encodedMessage = message.encode()

        # Send the encoded message to the server
        client_Socket.send(encodedMessage)
        firsttime = time.time()

        if ((len(bitrates) == 0
             and re.search(r'BigBuckBunny_6s', decoded_Client_Message))):
            decodedServerMessage, encodedServerMessage = receive_client_msg(
                client_Socket)
            if not decodedServerMessage:
                break
            bitrate_pattern = r'bandwidth="(\d+)"'
            found_bitrates = [
                int(match.group(1))
                for match in re.finditer(bitrate_pattern, decodedServerMessage)
            ]
            bitrates = found_bitrates
            tput_curr = min(bitrates)
            bitrates.sort()
            print('getting bitrates from xml below this line')
            print(bitrates)
            #client_Socket.send(cleanclientmsg)
            #decodedServerMessage, encodedServerMessage = receive_client_msg(client_Socket)
            connectionSocket.send(encodedServerMessage)
            continue
        # Receive the modified message back from the server
        encodedServerMessage = client_Socket.recv(1)

        #stop the conversation if server disconnects
        if not encodedServerMessage:
            break

        # Decode the modified message back into a string
        decodedServerMessage = encodedServerMessage.decode('iso-8859-1')
        #keep recv if not EOM is not \n
        while (len(decodedServerMessage) > 0
               and "\r\n\r\n" not in decodedServerMessage):
            encodednextmsg = client_Socket.recv(1)
            encodedServerMessage += encodednextmsg
            if not encodednextmsg:
                break
            decodednextmsg = encodednextmsg.decode()
            decodedServerMessage += decodednextmsg
        print("Received Message from Server: ", len(decodedServerMessage))
        index = decodedServerMessage.find("\r\n\r\n")
        responseheaders = decodedServerMessage
        headers = responseheaders.split("\n")
        clength = 0
        for header in headers:
            if "Content-Length: " in header:
                clength = int(header[16:])

        connectionSocket.send(encodedServerMessage)

        print("Sending Message to Client: ", len(encodedServerMessage))
        # Sending the encoded modified message back to the client
        totalsent = 0
        all_chunks = []
        while totalsent < clength:
            recieved_chunk = client_Socket.recv(2048)
            if not recieved_chunk:
                print('i broke')
                break
            all_chunks.append(recieved_chunk)
            totalsent += 2048
        secondtime = time.time()
        for chunk in all_chunks:
            connectionSocket.send(chunk)
        if filename == "/":
            continue
        writestr += " " + str(secondtime - firsttime) + " "
        tput_new = clength / (secondtime - firsttime)
        tput_curr = alpha * tput_new + (1 - alpha) * tput_curr

        writestr += str(round(tput_new / 1000)) + " " + str(
            round(tput_curr / 1000)) + " " + str(
                round(curr_bitrate /
                      1000)) + " " + server_Name + " " + filename + "\n"
        file.write(writestr)
        file.flush()

    client_Socket.close()
    connectionSocket.close()

serverSocket = socket(AF_INET, SOCK_STREAM)

#accept from any address but only listen-port
serverSocket.bind(('', int(sys.argv[4])))

serverSocket.listen(1)

#open file
file = open(sys.argv[2], "w", encoding="utf-8")
threads = []

#keep connecting to new client and server when they are disconnected
while True:
    connectionSocket, addr = serverSocket.accept()
    alpha = float(sys.argv[3])
    t = threading.Thread(target=thread_func,
                         args=(connectionSocket, addr, file, alpha))
    t.start()
    threads.append(t)

for t in threads:
    t.join()
serverSocket.close()
file.close()
